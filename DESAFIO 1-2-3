//DESAFIO 1 

import java.util.HashMap;
import java.util.Map;

public class ResistorColors {
    // Mapeamento de dígitos para cores
    private static final Map<Integer, String> digitToColorMap = new HashMap<>();
    
    static {
        digitToColorMap.put(0, "preto");
        digitToColorMap.put(1, "marrom");
        digitToColorMap.put(2, "vermelho");
        digitToColorMap.put(3, "laranja");
        digitToColorMap.put(4, "amarelo");
        digitToColorMap.put(5, "verde");
        digitToColorMap.put(6, "azul");
        digitToColorMap.put(7, "violeta");
        digitToColorMap.put(8, "cinza");
        digitToColorMap.put(9, "branco");
    }
    
    public static String getResistorColors(String input) {
        // Remover a palavra "ohms" e espaços
        String value = input.replace(" ohms", "");
        
        int multiplier = 0;
        String colors = "";
        
        // Verificar o formato da entrada e calcular o multiplicador
        if (value.contains("k")) {
            value = value.replace("k", "");
            multiplier = 1;
        } else if (value.contains("M")) {
            value = value.replace("M", "");
            multiplier = 2;
        }
        
        // Separar a parte inteira e decimal, se houver
        String[] parts = value.split("\\.");
        int significantDigits;
        
        if (parts.length == 1) {
            // Não há decimal
            significantDigits = Integer.parseInt(parts[0]);
        } else {
            // Há decimal
            significantDigits = Integer.parseInt(parts[0] + parts[1]);
            multiplier -= parts[1].length(); // Ajusta o multiplicador
        }
        
        // Converter os dois primeiros dígitos para as cores
        colors += digitToColorMap.get(significantDigits / 10) + " ";
        colors += digitToColorMap.get(significantDigits % 10) + " ";
        
        // Adicionar a cor do multiplicador
        colors += digitToColorMap.get(multiplier) + " ";
        
        // Adicionar a banda de tolerância (dourado)
        colors += "dourado";
        
        return colors;
    }
    
    public static void main(String[] args) {
        // Testes de exemplo
        System.out.println(getResistorColors("47 ohms")); // amarelo violeta preto dourado
        System.out.println(getResistorColors("4.7k ohms")); // amarelo violeta vermelho dourado
        System.out.println(getResistorColors("1M ohms")); // marrom preto verde dourado
        System.out.println(getResistorColors("10 ohms")); // marrom preto preto dourado
        System.out.println(getResistorColors("220 ohms")); // vermelho vermelho marrom dourado
    }
}


//DESAFIO 2
public class FlorSamambaia {
    public static String tentativaDesenhar(int r1, int x1, int y1, int r2, int x2, int y2) {
        // Calcular a distância entre os centros dos círculos
        double distancia = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
        
        // Verificar se o círculo do caçador contém completamente o círculo da flor
        if (r1 >= distancia + r2) {
            return "RICO";
        } else {
            return "MORTO";
        }
    }

    public static void main(String[] args) {
        // Exemplo de teste
        System.out.println(tentativaDesenhar(10, 0, 0, 5, 5, 0)); // RICO
        System.out.println(tentativaDesenhar(10, 0, 0, 5, 10, 0)); // MORTO
    }
}
 

//DESAFIO 3
import java.util.ArrayList;
import java.util.List;

public class Snail {
    public static List<Integer> snail(int[][] array) {
        List<Integer> result = new ArrayList<>();
        if (array.length == 0 || array[0].length == 0) {
            return result;
        }

        int top = 0;
        int bottom = array.length - 1;
        int left = 0;
        int right = array[0].length - 1;

        while (top <= bottom && left <= right) {
            // Percorre o topo
            for (int i = left; i <= right; i++) {
                result.add(array[top][i]);
            }
            top++;

            // Percorre o lado direito
            for (int i = top; i <= bottom; i++) {
                result.add(array[i][right]);
            }
            right--;

            if (top <= bottom) {
                // Percorre o fundo
                for (int i = right; i >= left; i--) {
                    result.add(array[bottom][i]);
                }
                bottom--;
            }

            if (left <= right) {
                // Percorre o lado esquerdo
                for (int i = bottom; i >= top; i--) {
                    result.add(array[i][left]);
                }
                left++;
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[][] array = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        System.out.println(snail(array)); // Saída esperada: [1, 2, 3, 6, 9, 8, 7, 4, 5]
    }
}
